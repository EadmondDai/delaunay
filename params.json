{"name":"Delaunay","tagline":"Delaunay triangulation for convex polygon","body":"Delaunay\r\n=====\r\n\r\n[![Build Status](https://travis-ci.org/Yonaba/delaunay.png)](https://travis-ci.org/Yonaba/delaunay)\r\n\r\n*delaunay* is a Lua module for [delaunay triangulation](http://en.wikipedia.org/wiki/Delaunay_triangulation) of a convex polygon.\r\n\r\n##Download\r\n\r\n###Git\r\n\r\n````\r\ngit clone http://github.com/Yonaba/delaunay.git\r\n````\r\n\r\n###Archive\r\n\r\n* [zip](https://github.com/Yonaba/delaunay/archive/delaunay-0.1-1.zip) | [tar.gz](https://github.com/Yonaba/delaunay/archive/delaunay-0.1-1.tar.gz) | [all](http://github.com/Yonaba/delaunay/tags)\r\n\r\n###LuaRocks\r\n\r\n````\r\nluarocks install delaunay\r\n````\r\n\r\n###MoonRocks\r\n\r\n````\r\nluarocks install --server=http://rocks.moonscript.org/manifests/Yonaba delaunay\r\n````\r\n\r\n##Installation\r\nCopy the file [delaunay.lua](delaunay.lua) inside your project folder,\r\ncall it with [require](http://pgl.yoyo.org/luai/i/require) function. It will return the `Delaunay` module, keeping safe the global environment.<br/>\r\n\r\n##Usage\r\n\r\nThe module provides 3 classes: <br/> \r\n* `Point`\r\n* `Edge`\r\n* `Triangle`\r\n\r\nIt also provides a single function named `triangulate`. This function accepts\r\na variable list (*vararg* `...`) of instances of class `Point`. Assuming those \r\npoints are the vertices of a convex polygon, it returns a table of instances of the class `Triangle` forming a *Delaunay triangulation* of the given polygon.\r\n\r\nA basic code example:\r\n```lua\r\nlocal Delaunay = require 'Delaunay'\r\nlocal Point    = Delaunay.Point\r\n\r\n-- Creating 10 random points\r\nlocal points = {}\r\nfor i = 1, 10 do\r\n  points[i] = Point(math.random() * 100, math.random() * 100)\r\nend\r\n\r\n-- Triangulating de convex polygon made by those points\r\nlocal triangles = Delaunay.triangulate(unpack(points))\r\n\r\n-- Printing the results\r\nfor i, triangle in ipairs(triangles) do\r\n  print(triangle)\r\nend\r\n````\r\n\r\nSee the [documentation](http://yonaba.github.io/delaunay/doc) for more details.\r\n\r\n##Testing\r\n###Specification\r\n\r\nThis repository include unit tests. You can run them using [Telescope](https://github.com/norman/telescope) with the following command from the root foolder:\r\n\r\n```\r\nlua tsc -f specs/*\r\n```\r\n\r\n###Performance\r\n\r\nYou can run the random performance tests included with the following command from the root folder:\r\n\r\n```lua\r\nlua performance/bench.lua\r\n````\r\n\r\n##License\r\nThis work is under [MIT-LICENSE](http://www.opensource.org/licenses/mit-license.php).<br/>\r\nCopyright (c) 2013 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-33850683-1","note":"Don't delete this file! It's used internally to help with page regeneration."}